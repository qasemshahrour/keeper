---
#All tasks in a block inherit directives applied at the block level. Most of what you can apply to a single task (with the exception of loops) can be applied at the block
 tasks:
   - name: Install, configure, and start Apache
     block:
       - name: Install httpd and memcached
         ansible.builtin.yum:
           name:
           - httpd
           - memcached
           state: present

       - name: Apply the foo config template
         ansible.builtin.template:
           src: templates/src.j2
           dest: /etc/foo.conf

       - name: Start service bar and enable it
         ansible.builtin.service:
           name: bar
           state: started
           enabled: True
     when: ansible_facts['distribution'] == 'CentOS'
     become: true
     become_user: root
     ignore_errors: true

----------------------------------------------------------------------------------------
#You can control how Ansible responds to task errors using blocks with rescue and always sections.
- name: Handle the error
  block:
    - name: Print a message
      debug:
        msg: 'I execute normally'

    - name: Force a failure
      command: /bin/false

    - name: Never print this
      debug:
        msg: 'I never execute, due to the above task failing, :-('

  rescue:
    - name: Print When Errors
      debug:
        msg: 'I caught an error, can do stuff here to fix it, :-)'

----------------------------------------------------------------------------------------
# You can also add an always section to a block. Tasks in the always section run no matter what the task status of the previous block is.
- name: Always do X
   block:
     - name: Print a message
       debug:
         msg: 'I execute normally'

     - name: Force a failure
       command: /bin/false

     - name: Never print this
       debug:
         msg: 'I never execute :-('
   always:
     - name: Always do this
       debug:
         msg: "This always executes, :-)"

----------------------------------------------------------------------------------------
# Together, these elements offer complex error handling.
- name: Attempt and graceful roll back demo
  block:
    - name: Print a message
      debug: 
        msg: 'I execute normally'

    - name: Force a failure
      command: /bin/false

    - name: Never print this
      debug:
        msg: 'I never execute, due to the above task failing, :-('
  rescue:
    - name: Print when errors
      debug:
        msg: 'I caught an error'

    - name: Force a failure in middle of recovery! >:-)
      command: /bin/false

    - name: Never print this
      debug:
        msg: 'I also never execute :-('
  always:
    - name: Always do this
      ansible.builtin.debug:
        msg: "This always executes"
----------------------------------------------------------------------------------------
#You can use blocks with flush_handlers in a rescue task to ensure that all handlers run even if an error occurs:
- name: Attempt and graceful roll back demo
  block:
    - name: Print a message
      debug:
        msg: 'I execute normally'
      changed_when: true
      notify: run me even after an error

    - name: Force a failure
      command: /bin/false
  rescue:
    - name: Make sure all handlers run
      meta: flush_handlers
 
handlers:
  - name: Run me even after an error
    debug:
      msg: 'This handler runs even on error'































